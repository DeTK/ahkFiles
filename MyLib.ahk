; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 비활성으로 해당 좌표 클릭하기
; Funtion Name   = clickInactive

; lParam         = x|y<<16 예) 500|500<<16
; title          = 문자열로 이루어진 타이틀
; clickCount     = 클릭하고 싶은횟수
clickInactive(lParam, title, clickCount = 1)
{
	while (clickCount--) ; 넘어온값이 0이면 진입안함
	{
		PostMessage, 0x201, 1, %lParam%,, %title% ; 마우스 왼클릭 다운
		Sleep, 50
		PostMessage, 0x202, 0, %lParam%,, %title% ; 마우스 왼클릭 업
	}
	return

}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 실시간 키눌림 확인
; Funtion Name = GetAsyncKeyState
; key = 키이름
GetAsyncKeyState(key)
{
	key := GetKeyVK(Key)
	return (Format("{:X}", DllCall("user32\GetAsyncKeyState", "int", key) & 0x8000) == 8000) ? 1 :
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 타입변환
; Funtion Name = Convert

; numType      = 포맷타입 (http://autohotkeykr.sourceforge.net/docs/commands/Format.htm)
; numList      = 리스트

; Return       = 포맷후 반환
convert(numType, numList)
{
	str :=
	while (numList[A_index])
	{
		str .= "{:" numType "}"
	}
	Return Format(str , numList*)
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 랜덤함수
; Funtion Name = random

; numMin       = 최소 숫자
; numMax       = 최대 숫자

; return       = 범위안의 랜덤한 숫자
random(numMin, numMax)
{
	Random, num, numMin, numMax
	Return num
}

; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 일정시간만큼 넘었는지 안넘었는지 체크
; Funtion Name = checkTimeOver

; firstTime    = 시간을 체크하고 싶은 지점에서 A_TickCount 를 담은 변수
; second       = 원하는 초

; Return       = "Yes" 또는 "No"
checkTimeOver(firstTime, second)
{
	return ((A_TickCount - firstTime) > (second * 1000)) ? "Yes" : "No"
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 단축키를 잠궛다 풀기
; Funtion Name = blockHotkey

; key     = 해당단축키
blockHotkey(key)
{
	Hotkey, % key, a
	Keywait, % key, D 
	Keywait, % key
	Hotkey, % key, off
	return

	a:
	return
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 마우스좌표lparam만들기
; Funtion Name = makeLparam

; x            = x좌표
; y            = y좌표

; Return       = lparam (마우스좌표)
makeLparam(x, y)
{
	return x | y << 16
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 컨트롤 미리보기 생성
; Funtion Name = makePlaceholder

; cId          =  현재 컨트롤의 핸들값
; str          =  현재 컨트롤의 미리보기 문자열
makePlaceholder(cId, str)
{
	DllCall("user32\SendMessage", "Ptr", cId, "UInt", 0x1501, "Ptr", True, "Str", str, "Ptr")
}
; ########################################################################################################################################################################################################
; ########################################################################################################################################################################################################
; 리스트 뒤집기
; Funtion Name = flipList

; originalList = 뒤집기 할 리스트
flipList(ByRef originalList)
{
	loop % len := originalList.MaxIndex()
		originalList.Push(originalList.RemoveAt(len - (A_Index - 1)))
	return
}

; 진수변환    3번째인자의진수   바꿀진수   바꿀숫자
; ConvertBase(f_Input, f_Output, f_Number)
; {
; 	static u := A_IsUnicode ? "_wcstoui64" : "_strtoui64"
; 	static v := A_IsUnicode ? "_i64tow"    : "_i64toa"
; 	VarSetCapacity(s, 65, 0) ; 변수의 가용 능력을 키우거나 그의 메모리를 해제합니다
; 	value := DllCall("msvcrt.dll\" u, "Str", f_Number, "UInt", 0, "UInt", f_Input, "CDECL Int64")
; 	DllCall("msvcrt.dll\" v, "Int64", value, "Str", s, "UInt", f_Output, "CDECL")
; 	return f_Number < 16 ? "0" s : s
; }